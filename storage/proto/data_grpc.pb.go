// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CacheInteract_MapInsert_FullMethodName        = "/CacheInteract/MapInsert"
	CacheInteract_MapFetch_FullMethodName         = "/CacheInteract/MapFetch"
	CacheInteract_MapDelete_FullMethodName        = "/CacheInteract/MapDelete"
	CacheInteract_QueueInsertFront_FullMethodName = "/CacheInteract/QueueInsertFront"
	CacheInteract_QueueInsertBack_FullMethodName  = "/CacheInteract/QueueInsertBack"
	CacheInteract_QueueRemoveFront_FullMethodName = "/CacheInteract/QueueRemoveFront"
	CacheInteract_QueueRemoveBack_FullMethodName  = "/CacheInteract/QueueRemoveBack"
	CacheInteract_InsertToSet_FullMethodName      = "/CacheInteract/InsertToSet"
	CacheInteract_GetSetValues_FullMethodName     = "/CacheInteract/GetSetValues"
	CacheInteract_SetHasMember_FullMethodName     = "/CacheInteract/SetHasMember"
	CacheInteract_SetRemoveMember_FullMethodName  = "/CacheInteract/SetRemoveMember"
)

// CacheInteractClient is the client API for CacheInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheInteractClient interface {
	MapInsert(ctx context.Context, in *MapInsertInput, opts ...grpc.CallOption) (*MapInsertResult, error)
	MapFetch(ctx context.Context, in *MapFetchInput, opts ...grpc.CallOption) (*MapFetchResult, error)
	MapDelete(ctx context.Context, in *MapDeleteInput, opts ...grpc.CallOption) (*MapDeleteResult, error)
	QueueInsertFront(ctx context.Context, in *QueueInsertInput, opts ...grpc.CallOption) (*QueueInsertOutput, error)
	QueueInsertBack(ctx context.Context, in *QueueInsertInput, opts ...grpc.CallOption) (*QueueInsertOutput, error)
	QueueRemoveFront(ctx context.Context, in *QueueRemoveInput, opts ...grpc.CallOption) (*QueueRemoveOutput, error)
	QueueRemoveBack(ctx context.Context, in *QueueRemoveInput, opts ...grpc.CallOption) (*QueueRemoveOutput, error)
	InsertToSet(ctx context.Context, in *InsertToSetInput, opts ...grpc.CallOption) (*InsertToSetOutput, error)
	GetSetValues(ctx context.Context, in *GetSetValuesInput, opts ...grpc.CallOption) (*GetSetValuesOutput, error)
	SetHasMember(ctx context.Context, in *SetHasMemberInput, opts ...grpc.CallOption) (*SetHasMemberOutput, error)
	SetRemoveMember(ctx context.Context, in *SetRemoveMemberInput, opts ...grpc.CallOption) (*SetRemoveMemberOutput, error)
}

type cacheInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheInteractClient(cc grpc.ClientConnInterface) CacheInteractClient {
	return &cacheInteractClient{cc}
}

func (c *cacheInteractClient) MapInsert(ctx context.Context, in *MapInsertInput, opts ...grpc.CallOption) (*MapInsertResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapInsertResult)
	err := c.cc.Invoke(ctx, CacheInteract_MapInsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) MapFetch(ctx context.Context, in *MapFetchInput, opts ...grpc.CallOption) (*MapFetchResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapFetchResult)
	err := c.cc.Invoke(ctx, CacheInteract_MapFetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) MapDelete(ctx context.Context, in *MapDeleteInput, opts ...grpc.CallOption) (*MapDeleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapDeleteResult)
	err := c.cc.Invoke(ctx, CacheInteract_MapDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) QueueInsertFront(ctx context.Context, in *QueueInsertInput, opts ...grpc.CallOption) (*QueueInsertOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueInsertOutput)
	err := c.cc.Invoke(ctx, CacheInteract_QueueInsertFront_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) QueueInsertBack(ctx context.Context, in *QueueInsertInput, opts ...grpc.CallOption) (*QueueInsertOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueInsertOutput)
	err := c.cc.Invoke(ctx, CacheInteract_QueueInsertBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) QueueRemoveFront(ctx context.Context, in *QueueRemoveInput, opts ...grpc.CallOption) (*QueueRemoveOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueRemoveOutput)
	err := c.cc.Invoke(ctx, CacheInteract_QueueRemoveFront_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) QueueRemoveBack(ctx context.Context, in *QueueRemoveInput, opts ...grpc.CallOption) (*QueueRemoveOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueRemoveOutput)
	err := c.cc.Invoke(ctx, CacheInteract_QueueRemoveBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) InsertToSet(ctx context.Context, in *InsertToSetInput, opts ...grpc.CallOption) (*InsertToSetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertToSetOutput)
	err := c.cc.Invoke(ctx, CacheInteract_InsertToSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) GetSetValues(ctx context.Context, in *GetSetValuesInput, opts ...grpc.CallOption) (*GetSetValuesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSetValuesOutput)
	err := c.cc.Invoke(ctx, CacheInteract_GetSetValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) SetHasMember(ctx context.Context, in *SetHasMemberInput, opts ...grpc.CallOption) (*SetHasMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHasMemberOutput)
	err := c.cc.Invoke(ctx, CacheInteract_SetHasMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheInteractClient) SetRemoveMember(ctx context.Context, in *SetRemoveMemberInput, opts ...grpc.CallOption) (*SetRemoveMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRemoveMemberOutput)
	err := c.cc.Invoke(ctx, CacheInteract_SetRemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheInteractServer is the server API for CacheInteract service.
// All implementations must embed UnimplementedCacheInteractServer
// for forward compatibility.
type CacheInteractServer interface {
	MapInsert(context.Context, *MapInsertInput) (*MapInsertResult, error)
	MapFetch(context.Context, *MapFetchInput) (*MapFetchResult, error)
	MapDelete(context.Context, *MapDeleteInput) (*MapDeleteResult, error)
	QueueInsertFront(context.Context, *QueueInsertInput) (*QueueInsertOutput, error)
	QueueInsertBack(context.Context, *QueueInsertInput) (*QueueInsertOutput, error)
	QueueRemoveFront(context.Context, *QueueRemoveInput) (*QueueRemoveOutput, error)
	QueueRemoveBack(context.Context, *QueueRemoveInput) (*QueueRemoveOutput, error)
	InsertToSet(context.Context, *InsertToSetInput) (*InsertToSetOutput, error)
	GetSetValues(context.Context, *GetSetValuesInput) (*GetSetValuesOutput, error)
	SetHasMember(context.Context, *SetHasMemberInput) (*SetHasMemberOutput, error)
	SetRemoveMember(context.Context, *SetRemoveMemberInput) (*SetRemoveMemberOutput, error)
	mustEmbedUnimplementedCacheInteractServer()
}

// UnimplementedCacheInteractServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheInteractServer struct{}

func (UnimplementedCacheInteractServer) MapInsert(context.Context, *MapInsertInput) (*MapInsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapInsert not implemented")
}
func (UnimplementedCacheInteractServer) MapFetch(context.Context, *MapFetchInput) (*MapFetchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapFetch not implemented")
}
func (UnimplementedCacheInteractServer) MapDelete(context.Context, *MapDeleteInput) (*MapDeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapDelete not implemented")
}
func (UnimplementedCacheInteractServer) QueueInsertFront(context.Context, *QueueInsertInput) (*QueueInsertOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueInsertFront not implemented")
}
func (UnimplementedCacheInteractServer) QueueInsertBack(context.Context, *QueueInsertInput) (*QueueInsertOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueInsertBack not implemented")
}
func (UnimplementedCacheInteractServer) QueueRemoveFront(context.Context, *QueueRemoveInput) (*QueueRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueRemoveFront not implemented")
}
func (UnimplementedCacheInteractServer) QueueRemoveBack(context.Context, *QueueRemoveInput) (*QueueRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueRemoveBack not implemented")
}
func (UnimplementedCacheInteractServer) InsertToSet(context.Context, *InsertToSetInput) (*InsertToSetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertToSet not implemented")
}
func (UnimplementedCacheInteractServer) GetSetValues(context.Context, *GetSetValuesInput) (*GetSetValuesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetValues not implemented")
}
func (UnimplementedCacheInteractServer) SetHasMember(context.Context, *SetHasMemberInput) (*SetHasMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHasMember not implemented")
}
func (UnimplementedCacheInteractServer) SetRemoveMember(context.Context, *SetRemoveMemberInput) (*SetRemoveMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemoveMember not implemented")
}
func (UnimplementedCacheInteractServer) mustEmbedUnimplementedCacheInteractServer() {}
func (UnimplementedCacheInteractServer) testEmbeddedByValue()                       {}

// UnsafeCacheInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheInteractServer will
// result in compilation errors.
type UnsafeCacheInteractServer interface {
	mustEmbedUnimplementedCacheInteractServer()
}

func RegisterCacheInteractServer(s grpc.ServiceRegistrar, srv CacheInteractServer) {
	// If the following call pancis, it indicates UnimplementedCacheInteractServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CacheInteract_ServiceDesc, srv)
}

func _CacheInteract_MapInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapInsertInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).MapInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_MapInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).MapInsert(ctx, req.(*MapInsertInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_MapFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapFetchInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).MapFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_MapFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).MapFetch(ctx, req.(*MapFetchInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_MapDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapDeleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).MapDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_MapDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).MapDelete(ctx, req.(*MapDeleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_QueueInsertFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInsertInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).QueueInsertFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_QueueInsertFront_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).QueueInsertFront(ctx, req.(*QueueInsertInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_QueueInsertBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInsertInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).QueueInsertBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_QueueInsertBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).QueueInsertBack(ctx, req.(*QueueInsertInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_QueueRemoveFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).QueueRemoveFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_QueueRemoveFront_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).QueueRemoveFront(ctx, req.(*QueueRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_QueueRemoveBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).QueueRemoveBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_QueueRemoveBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).QueueRemoveBack(ctx, req.(*QueueRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_InsertToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertToSetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).InsertToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_InsertToSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).InsertToSet(ctx, req.(*InsertToSetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_GetSetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetValuesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).GetSetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_GetSetValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).GetSetValues(ctx, req.(*GetSetValuesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_SetHasMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHasMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).SetHasMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_SetHasMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).SetHasMember(ctx, req.(*SetHasMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheInteract_SetRemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRemoveMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheInteractServer).SetRemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheInteract_SetRemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheInteractServer).SetRemoveMember(ctx, req.(*SetRemoveMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheInteract_ServiceDesc is the grpc.ServiceDesc for CacheInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CacheInteract",
	HandlerType: (*CacheInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapInsert",
			Handler:    _CacheInteract_MapInsert_Handler,
		},
		{
			MethodName: "MapFetch",
			Handler:    _CacheInteract_MapFetch_Handler,
		},
		{
			MethodName: "MapDelete",
			Handler:    _CacheInteract_MapDelete_Handler,
		},
		{
			MethodName: "QueueInsertFront",
			Handler:    _CacheInteract_QueueInsertFront_Handler,
		},
		{
			MethodName: "QueueInsertBack",
			Handler:    _CacheInteract_QueueInsertBack_Handler,
		},
		{
			MethodName: "QueueRemoveFront",
			Handler:    _CacheInteract_QueueRemoveFront_Handler,
		},
		{
			MethodName: "QueueRemoveBack",
			Handler:    _CacheInteract_QueueRemoveBack_Handler,
		},
		{
			MethodName: "InsertToSet",
			Handler:    _CacheInteract_InsertToSet_Handler,
		},
		{
			MethodName: "GetSetValues",
			Handler:    _CacheInteract_GetSetValues_Handler,
		},
		{
			MethodName: "SetHasMember",
			Handler:    _CacheInteract_SetHasMember_Handler,
		},
		{
			MethodName: "SetRemoveMember",
			Handler:    _CacheInteract_SetRemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
